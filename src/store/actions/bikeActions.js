//With Thunk, we can return a function instead of an action object (which we do normally)
export const createBike = bike => {
  return (dispatch, getState, { getFirebase, getFirestore }) => {
    //Make async call to database
    const firestore = getFirestore();
    firestore
      .collection("bikes")
      .add({
        ...bike,
        photoURL: "test.com",
        createdAt: new Date()
      })
      .then(() => {
        dispatch({ type: "CREATE_BIKE", bike: bike });
      })
      .catch(err => {
        dispatch({ type: "CREATE_BIKE_ERROR", err: err });
      });
  };

  // return (dispatch, getState, { getFirebase, getFirestore }) => {
  //   /****** USING THUNK, HALT AND MAKE ASYNC CALL TO DATABASE ******/
  //   const firestore = getFirestore();
  //   const profile = getState().firebase.profile;
  //   const uid = getState().firebase.auth.uid;

  //   let bike_collection = firestore.collection("bikes"); //Reference to our bikes collection on our Firestore
  //   //Here we are adding a new document to the bikes collection in our firestore. Doc ID is auto generated by Firestore.
  //   //This is asyncronous and will return a promise, so we can add a then at the end of this add funciton.
  //   bike_collection
  //     .add({
  //       ...bike,
  //       authorFirstName: profile.firstName,
  //       authorLastName: profile.lastName,
  //       authorId: uid,
  //       createdAt: new Date()
  //     })
  //     .then(() => {
  //       /********** CONTINUE DISPATCH *************/
  //       dispatch({ type: "CREATE_BIKE", bike: bike });
  //     })
  //     .catch(err => {
  //       /********** CATCH ERROR *************/
  //       //If add cant be comepleted for some reason, then catch the error here.
  //       dispatch({ type: "CREATE_BIKE_ERROR", err: err });
  //     });
  // };
};

export const deleteBike = (bike, docId) => {
  return (dispatch, getState, { getFirestore }) => {
    const firestore = getFirestore();

    let bike_collection = firestore.collection("bikes");
    bike_collection
      .doc(docId)
      .delete()
      .then(() => {
        dispatch({ type: "DELETE_BIKE" });
      })
      .catch(err => {
        dispatch({ type: "DELETE_BIKE_ERROR", err: err });
      });
  };
};

export const editBike = (bike, docId) => {
  return (dispatch, getState, { getFirestore }) => {
    const firestore = getFirestore();
    const profile = getState().firebase.profile;
    const uid = getState().firebase.auth.uid;

    let bike_collection = firestore.collection("bikes");
    bike_collection
      .doc(docId)
      .update({
        ...bike,
        authorFirstName: profile.firstName,
        authorLastName: profile.lastName,
        authorId: uid,
        createdAt: new Date()
      })
      .then(() => {
        dispatch({ type: "EDIT_BIKE" });
      })
      .catch(err => {
        dispatch({ type: "EDIT_BIKE_ERROR", err: err });
      });
  };
};
